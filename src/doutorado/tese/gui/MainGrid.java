/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package doutorado.tese.gui;

import doutorado.tese.util.Constantes;
import doutorado.tese.util.Metadados;
import doutorado.tese.util.coluna.Coluna;
import doutorado.tese.util.io.ManipuladorArquivo;
import doutorado.tese.visualizacao.glyph.Glyph;
import doutorado.tese.visualizacao.glyph.decorator.variaveisvisuais.color.Cor;
import doutorado.tese.visualizacao.glyph.decorator.variaveisvisuais.letters.Letra;
import doutorado.tese.visualizacao.glyph.decorator.variaveisvisuais.numbers.Numeral;
import doutorado.tese.visualizacao.glyph.decorator.variaveisvisuais.shapes.FormaGeometrica;
import doutorado.tese.visualizacao.glyph.decorator.variaveisvisuais.shapes.GeometryFactory;
import doutorado.tese.visualizacao.glyph.decorator.variaveisvisuais.shapes.Trapezio;
import doutorado.tese.visualizacao.glyph.decorator.variaveisvisuais.texture.Textura;
import doutorado.tese.visualizacao.grid.Grid;
import doutorado.tese.visualizacao.grid.ItemGrid;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Anderson Soares
 */
public class MainGrid extends javax.swing.JFrame implements PropertyChangeListener {

    private static final Logger LOGGER = LogManager.getLogger(MainGrid.class);
    private Grid gridPanel;
    private Task task;
    private ManipuladorArquivo manipulador;
    private File selectedFile;
    private String[] variaveisVisuaisEscolhidas;
    public float porcentagem = 1f;

    /**
     * Creates new form MainGrid
     */
    public MainGrid() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
//            Logger.getLogger(MainGrid.class.getName()).log(Level.SEVERE, null, ex);
            LOGGER.info(Main.class.getName());
        }
        initComponents();
        gridPanel = new Grid();
        gridPanel.setPorcetagem(porcentagem);
        painelEsquerda.add(gridPanel);
        gridPanel.setDoubleBuffered(true);
        habilitarRadiosOpcoesGrid(true);
        msgFeedback.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        progressBarDialog = new javax.swing.JDialog();
        progressoBarra = new javax.swing.JProgressBar();
        painelEsquerda = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        varVisuaisEscolidasList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        varVisuaisList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inserirButton = new javax.swing.JButton();
        removerButton = new javax.swing.JButton();
        cimaButton = new javax.swing.JButton();
        baixoButton = new javax.swing.JButton();
        botaoConfiVarVisuais = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        radio5x10 = new javax.swing.JRadioButton();
        radio10x20 = new javax.swing.JRadioButton();
        radio15x24 = new javax.swing.JRadioButton();
        msgFeedback = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        radio100 = new javax.swing.JRadioButton();
        radio80 = new javax.swing.JRadioButton();
        radio40 = new javax.swing.JRadioButton();
        radio60 = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        texturaComboBox = new javax.swing.JComboBox<>();
        corComboBox = new javax.swing.JComboBox<>();
        formaComboBox = new javax.swing.JComboBox<>();
        letraComboBox = new javax.swing.JComboBox<>();
        numeroComboBox = new javax.swing.JComboBox<>();
        viewGlyphsButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openFileMenuItem = new javax.swing.JMenuItem();

        buttonGroup1.add(radio5x10);
        buttonGroup1.add(radio10x20);
        buttonGroup1.add(radio15x24);

        progressBarDialog.setTitle("Please wait..."
        );
        progressBarDialog.setResizable(false);

        progressoBarra.setStringPainted(true);

        javax.swing.GroupLayout progressBarDialogLayout = new javax.swing.GroupLayout(progressBarDialog.getContentPane());
        progressBarDialog.getContentPane().setLayout(progressBarDialogLayout);
        progressBarDialogLayout.setHorizontalGroup(
            progressBarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressBarDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressoBarra, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        progressBarDialogLayout.setVerticalGroup(
            progressBarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressBarDialogLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(progressoBarra, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout painelEsquerdaLayout = new javax.swing.GroupLayout(painelEsquerda);
        painelEsquerda.setLayout(painelEsquerdaLayout);
        painelEsquerdaLayout.setHorizontalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1038, Short.MAX_VALUE)
        );
        painelEsquerdaLayout.setVerticalGroup(
            painelEsquerdaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        varVisuaisEscolidasList.setToolTipText("");
        varVisuaisEscolidasList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                varVisuaisEscolidasListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(varVisuaisEscolidasList);

        varVisuaisList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Texture", "Color", "Shape", "Letter", "Number", "Overlap" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        varVisuaisList.setEnabled(false);
        varVisuaisList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                varVisuaisListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(varVisuaisList);

        jLabel1.setText("Visual variables:");

        jLabel2.setText("Order:");

        inserirButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDir.png"))); // NOI18N
        inserirButton.setEnabled(false);
        inserirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirButtonActionPerformed(evt);
            }
        });

        removerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaEsq.png"))); // NOI18N
        removerButton.setEnabled(false);
        removerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerButtonActionPerformed(evt);
            }
        });

        cimaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaUp.png"))); // NOI18N
        cimaButton.setEnabled(false);
        cimaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cimaButtonActionPerformed(evt);
            }
        });

        baixoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/setaDown.png"))); // NOI18N
        baixoButton.setEnabled(false);
        baixoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixoButtonActionPerformed(evt);
            }
        });

        botaoConfiVarVisuais.setText("OK");
        botaoConfiVarVisuais.setEnabled(false);
        botaoConfiVarVisuais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoConfiVarVisuaisActionPerformed(evt);
            }
        });

        jLabel8.setText("Grid:");

        radio5x10.setText("5x10");
        radio5x10.setEnabled(false);
        radio5x10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio5x10ActionPerformed(evt);
            }
        });

        radio10x20.setText("10x20");
        radio10x20.setEnabled(false);
        radio10x20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio10x20ActionPerformed(evt);
            }
        });

        radio15x24.setText("15x24");
        radio15x24.setEnabled(false);
        radio15x24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio15x24ActionPerformed(evt);
            }
        });

        msgFeedback.setForeground(new java.awt.Color(0, 153, 0));
        msgFeedback.setText("Glyphs successfully configured!");

        jLabel12.setText("Overlap");

        radio100.setText("100%");
        radio100.setActionCommand("");
        radio100.setEnabled(false);
        radio100.setFocusPainted(false);
        radio100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio100ActionPerformed(evt);
            }
        });

        radio80.setText("80%");
        radio80.setActionCommand("");
        radio80.setEnabled(false);
        radio80.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio80ActionPerformed(evt);
            }
        });

        radio40.setText("40%");
        radio40.setActionCommand("");
        radio40.setEnabled(false);
        radio40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio40ActionPerformed(evt);
            }
        });

        radio60.setText("60%");
        radio60.setActionCommand("");
        radio60.setEnabled(false);
        radio60.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio60ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inserirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cimaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(baixoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(botaoConfiVarVisuais, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(msgFeedback, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(153, 153, 153))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radio5x10)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radio10x20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(radio15x24)
                                .addGap(250, 250, 250))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(81, 81, 81)
                                        .addComponent(radio60)
                                        .addGap(18, 18, 18)
                                        .addComponent(radio40)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radio100)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radio80)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(radio5x10)
                    .addComponent(radio10x20)
                    .addComponent(radio15x24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(radio100)
                    .addComponent(radio80)
                    .addComponent(radio60)
                    .addComponent(radio40))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(cimaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(baixoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(inserirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoConfiVarVisuais)
                    .addComponent(msgFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Set Up", jPanel2);

        jLabel3.setText("Texture:");

        jLabel4.setText("Color:");

        jLabel5.setText("Shape:");

        jLabel6.setText("Letter:");

        jLabel7.setText("Number:");

        texturaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));

        corComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));

        formaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));

        letraComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));

        numeroComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---" }));

        viewGlyphsButton.setText("View Glyphs");
        viewGlyphsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewGlyphsButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Number:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(viewGlyphsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(texturaComboBox, 0, 79, Short.MAX_VALUE)
                            .addComponent(corComboBox, 0, 79, Short.MAX_VALUE)
                            .addComponent(formaComboBox, 0, 79, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(letraComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(numeroComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(texturaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(letraComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(corComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(numeroComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(formaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewGlyphsButton)
                .addContainerGap(97, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Glyphs", jPanel4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jToolBar1.setRollover(true);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel10.setText("select the glyph with ...");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9))
                .addContainerGap(260, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addContainerGap(227, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel3);

        jToolBar1.add(jScrollPane1);

        jMenu1.setText("File");

        openFileMenuItem.setText("Open File");
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openFileMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(painelEsquerda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelEsquerda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void removerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerButtonActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributos = new ArrayList<>();

        for (int i = 0; i < varVisuaisList.getModel().getSize(); i++) {
            String elementAt = varVisuaisList.getModel().getElementAt(i);
            atributos.add(elementAt);
        }
        atributos.addAll(varVisuaisEscolidasList.getSelectedValuesList());
        atributos.sort(null);
        loadItensVarVisuais(atributos.toArray());

        //remover o conteudo da lista de hierarquia treemap
        ListModel<String> modelGlyphs = varVisuaisEscolidasList.getModel();
        List<String> selectedValuesList = varVisuaisEscolidasList.getSelectedValuesList();
        for (int i = 0; i < modelGlyphs.getSize(); i++) {
            if (!selectedValuesList.contains(modelGlyphs.getElementAt(i))) {
                newListaAtribTreemap.add(modelGlyphs.getElementAt(i));
            }
        }
        loadVariaveisEscolhidasList(newListaAtribTreemap.toArray(), varVisuaisEscolidasList);

        if (varVisuaisEscolidasList.getModel().getSize() == 0) {
            varVisuaisEscolidasList.setEnabled(false);
        }
    }//GEN-LAST:event_removerButtonActionPerformed

    private void inserirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirButtonActionPerformed
        List<Object> newListaAtribTreemap = new ArrayList<>();
        List<Object> atributosEscolhidos = new ArrayList<>();
        for (int i = 0; i < varVisuaisEscolidasList.getModel().getSize(); i++) {
            String elementAt = varVisuaisEscolidasList.getModel().getElementAt(i);
            atributosEscolhidos.add(elementAt);
        }
        atributosEscolhidos.addAll(varVisuaisList.getSelectedValuesList());
        atributosEscolhidos.sort(null);
        loadVariaveisEscolhidasList(atributosEscolhidos.toArray(), varVisuaisEscolidasList);
        varVisuaisEscolidasList.setEnabled(true);
        botaoConfiVarVisuais.setEnabled(true);

        //remover o conteudo da lista de atributos original
        ListModel<String> modelOriginal = varVisuaisList.getModel();
        List<String> selectedValuesList = varVisuaisList.getSelectedValuesList();
        for (int i = 0; i < modelOriginal.getSize(); i++) {
            if (!selectedValuesList.contains(modelOriginal.getElementAt(i))) {
                newListaAtribTreemap.add(modelOriginal.getElementAt(i));
            }
        }
        loadItensVarVisuais(newListaAtribTreemap.toArray());
    }//GEN-LAST:event_inserirButtonActionPerformed

    private void cimaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cimaButtonActionPerformed
        List<String> novaLista = new ArrayList<>();
        int[] selectedValuesList = varVisuaisEscolidasList.getSelectedIndices();
        for (int i = 0; i < varVisuaisEscolidasList.getModel().getSize(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    novaLista.add(i - 1, varVisuaisEscolidasList.getModel().getElementAt(i));
                } else {
                    novaLista.add(varVisuaisEscolidasList.getModel().getElementAt(i));
                }
            }
        }
        loadVariaveisEscolhidasList(novaLista.toArray(), varVisuaisEscolidasList);
    }//GEN-LAST:event_cimaButtonActionPerformed

    private void baixoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixoButtonActionPerformed
        List<String> novaLista = new ArrayList<>(varVisuaisEscolidasList.getModel().getSize());
        for (int i = 0; i < varVisuaisEscolidasList.getModel().getSize(); i++) {
            novaLista.add(varVisuaisEscolidasList.getModel().getElementAt(i));
        }
        int[] selectedValuesList = varVisuaisEscolidasList.getSelectedIndices();
        for (int i = 0; i < novaLista.size(); i++) {
            for (int j = 0; j < selectedValuesList.length; j++) {
                if (i == selectedValuesList[j]) {
                    String caraFrente = novaLista.get(i + 1);
                    String caraAtual = novaLista.get(i);
                    novaLista.add(i + 1, caraAtual);
                    novaLista.add(i, caraFrente);
                    novaLista.remove(i + 2);
                    novaLista.remove(i + 2);
                    break;
                }
            }
        }
        loadVariaveisEscolhidasList(novaLista.toArray(), varVisuaisEscolidasList);
    }//GEN-LAST:event_baixoButtonActionPerformed

    private void botaoConfiVarVisuaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoConfiVarVisuaisActionPerformed
        variaveisVisuaisEscolhidas = parseListString2Array(varVisuaisEscolidasList.getModel());
        gridPanel.criarItens();
        gridPanel.setVariaveisVisuaisEscolhidas(variaveisVisuaisEscolhidas);
        gridPanel.loadMatrizGlyphs();
//        configComboBoxVarVisuais();                
        msgFeedback.setVisible(true);
        gridPanel.setCofig();
        gridPanel.repaint();
    }//GEN-LAST:event_botaoConfiVarVisuaisActionPerformed

    private void varVisuaisEscolidasListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_varVisuaisEscolidasListValueChanged
        if (varVisuaisEscolidasList.getSelectedValuesList().size() >= 1) {
            removerButton.setEnabled(true);
            if (varVisuaisEscolidasList.getSelectedIndex() > 0) {
                cimaButton.setEnabled(true);
            } else {
                cimaButton.setEnabled(false);
            }
            if (varVisuaisEscolidasList.getSelectedIndex() < varVisuaisEscolidasList.getModel().getSize() - 1) {
                baixoButton.setEnabled(true);
            } else {
                baixoButton.setEnabled(false);
            }
        } else {
            removerButton.setEnabled(false);
            cimaButton.setEnabled(false);
            baixoButton.setEnabled(false);
            botaoConfiVarVisuais.setEnabled(false);
            msgFeedback.setVisible(false);
        }
        if (varVisuaisEscolidasList.getModel().getSize() >= 1) {
            botaoConfiVarVisuais.setEnabled(true);
        } else {
            botaoConfiVarVisuais.setEnabled(false);
        }
    }//GEN-LAST:event_varVisuaisEscolidasListValueChanged

    private void varVisuaisListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_varVisuaisListValueChanged
        if (varVisuaisList.getSelectedValuesList().size() >= 1) {
            inserirButton.setEnabled(true);
        } else {
            inserirButton.setEnabled(false);
        }
    }//GEN-LAST:event_varVisuaisListValueChanged

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "TXT & CSV Files", "txt", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
//            limparResquiciosBasesAnteriores();
//            checkGlyph.setEnabled(false);
            selectedFile = chooser.getSelectedFile();

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            LOGGER.info("Arquivo selecionado: " + selectedFile);

            progressBarDialog.setVisible(true);
            progressBarDialog.setSize(new Dimension(400, 115));
            progressBarDialog.setLocationRelativeTo(null);

            task = new Task();
            task.addPropertyChangeListener(this);
            task.execute();
        } else {
            JOptionPane.showMessageDialog(null, "The file type can not be read.", "Erro!", JOptionPane.ERROR_MESSAGE);
//            logger.error("The file type can not be read. - Did it again!");
        }
    }//GEN-LAST:event_openFileMenuItemActionPerformed

    private void viewGlyphsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewGlyphsButtonActionPerformed
        ArrayList<Object> atributosEscolhidosGlyph = getAtributosEscolhidosGlyph();
        gridPanel.setAtributosEscolhidos(atributosEscolhidosGlyph);

//        atualizarLegendaGlyphs(atributosEscolhidosGlyph);
    }//GEN-LAST:event_viewGlyphsButtonActionPerformed

    private void radio5x10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio5x10ActionPerformed
        configGrid();
    }//GEN-LAST:event_radio5x10ActionPerformed

    private void radio10x20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio10x20ActionPerformed
        configGrid();
    }//GEN-LAST:event_radio10x20ActionPerformed

    private void radio15x24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio15x24ActionPerformed
        configGrid();
    }//GEN-LAST:event_radio15x24ActionPerformed

    private void radio100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio100ActionPerformed
        configGrid();
    }//GEN-LAST:event_radio100ActionPerformed

    private void radio80ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio80ActionPerformed
        configGrid();

    }//GEN-LAST:event_radio80ActionPerformed

    private void radio40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio40ActionPerformed
        configGrid();
    }//GEN-LAST:event_radio40ActionPerformed

    private void radio60ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio60ActionPerformed
        configGrid();
    }//GEN-LAST:event_radio60ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGrid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGrid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGrid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGrid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame mainFrame = new MainGrid();
                mainFrame.setVisible(true);
                mainFrame.setExtendedState(java.awt.Frame.MAXIMIZED_HORIZ);
//                new MainGrid().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton baixoButton;
    private javax.swing.JButton botaoConfiVarVisuais;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cimaButton;
    private javax.swing.JComboBox<String> corComboBox;
    private javax.swing.JComboBox<String> formaComboBox;
    private javax.swing.JButton inserirButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox<String> letraComboBox;
    private javax.swing.JLabel msgFeedback;
    private javax.swing.JComboBox<String> numeroComboBox;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JPanel painelEsquerda;
    private javax.swing.JDialog progressBarDialog;
    private javax.swing.JProgressBar progressoBarra;
    private javax.swing.JRadioButton radio100;
    private javax.swing.JRadioButton radio10x20;
    private javax.swing.JRadioButton radio15x24;
    private javax.swing.JRadioButton radio40;
    private javax.swing.JRadioButton radio5x10;
    private javax.swing.JRadioButton radio60;
    private javax.swing.JRadioButton radio80;
    private javax.swing.JButton removerButton;
    private javax.swing.JComboBox<String> texturaComboBox;
    private javax.swing.JList<String> varVisuaisEscolidasList;
    private javax.swing.JList<String> varVisuaisList;
    private javax.swing.JButton viewGlyphsButton;
    // End of variables declaration//GEN-END:variables

    public void configGrid() {
        if (radio100.isSelected()) {

            porcentagem = 1f;
        }
        else if (radio80.isSelected()) {
            porcentagem = 0.8f;
        }
        else if (radio60.isSelected()) {
            porcentagem = 0.6f;
        }
        else if (radio40.isSelected()) {
            porcentagem = 0.4f;
        }

        if (radio15x24.isSelected()) {
            gridPanel.setQuantVert(15);
            gridPanel.setQuantHoriz(24);
        } else if (radio10x20.isSelected()) {
            gridPanel.setQuantVert(10);
            gridPanel.setQuantHoriz(20);
        } else {
            gridPanel.setQuantVert(5);
            gridPanel.setQuantHoriz(10);
        }
        if (!varVisuaisList.isEnabled()) {
            varVisuaisList.setEnabled(true);
            if (varVisuaisEscolidasList.getModel().getSize() >= 1) {
                botaoConfiVarVisuais.setEnabled(true);
            }
        }
    }

    private void loadVariaveisEscolhidasList(Object[] objs, JList<String> jList) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        jList.setModel(model);
    }

    private void loadItensVarVisuais(Object[] objs) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        varVisuaisList.setModel(model);
        varVisuaisList.setEnabled(true);
    }

    public String[] parseListString2Array(ListModel<String> lista) {
        String[] convertida = new String[lista.getSize()];
        for (int i = 0; i < convertida.length; i++) {
            convertida[i] = lista.getElementAt(i);
        }
        return convertida;
    }

    private void loadVariaveisGlyph(Object[] objs, JComboBox<String> atributo) {
        DefaultComboBoxModel model = new DefaultComboBoxModel(objs);
        atributo.setModel(model);
    }

    /**
     * Metodo usado para carregar os atributos categoricos nas listas de glyphs
     *
     * @param nivel
     * @return um array contendo os atributos que serao exibidos nas listas dos
     * glyphs
     */
    private Object[] getListaAtributosCategoricos(Constantes.NivelGlyph nivel, boolean glyph) {
        ArrayList<String> list = new ArrayList<>();
        list.add(0, "---");
        list.addAll(analisarAtributosCategoricos(nivel, glyph));
        return list.toArray();
    }

    private List<String> analisarAtributosCategoricos(Constantes.NivelGlyph nivel, boolean glyph) {
        ArrayList<String> list = new ArrayList<>();
        switch (nivel) {
            case NIVEL_1:
                analisarQuantAtributosCategoricos(list, Constantes.TIPO_TEXTURA);
                break;
            case NIVEL_2:
                if (glyph) {
                    analisarQuantAtributosCategoricos(list, Constantes.getCorGlyphs());
                } else {
                    analisarQuantAtributosCategoricos(list, Constantes.getCor());
                }
                break;
            case NIVEL_3:
                GeometryFactory.FORMAS.GLYPH_FORMAS[] formas = new GeometryFactory.FORMAS.GLYPH_FORMAS[GeometryFactory.FORMAS.GLYPH_FORMAS.values().length - 1];
                for (int i = 0; i < formas.length; i++) {
                    formas[i] = GeometryFactory.FORMAS.GLYPH_FORMAS.values()[i];
                }
                analisarQuantAtributosCategoricos(list, formas);
                break;
            case NIVEL_4:
                analisarQuantAtributosCategoricos(list, Constantes.LETRAS_ALFABETO);
                break;
            case NIVEL_5:
                analisarQuantAtributosCategoricos(list, Constantes.NUMEROS);
                break;
            default:
                System.err.println("Nao foi carregar atributos para a dimensão.");
        }
        return list;
    }

    private List<String> analisarQuantAtributosCategoricos(List<String> list, Object[] obj) {
        for (String colunasCategorica : getColunasCategoricas()) {
            Coluna c = ManipuladorArquivo.getColuna(colunasCategorica);
            int quantDadosDistintos = c.getDadosDistintos().size();
            if (quantDadosDistintos <= obj.length) {
                list.add(c.getName());
            }
        }
        return list;
    }

    private List<String> getColunasCategoricas() {
        List<String> list = new ArrayList<>();
        for (Coluna c : manipulador.getColunas()) {
            if (c.getDescription().equals(Metadados.Descricao.CATEGORICAL)) {
                list.add(c.getName());
            }
        }
        return list;
    }

    private void habilitarRadiosOpcoesGrid(boolean ativador) {
        radio5x10.setEnabled(ativador);
        radio10x20.setEnabled(ativador);
        radio15x24.setEnabled(ativador);
        radio100.setEnabled(ativador);
        radio80.setEnabled(ativador);
        radio60.setEnabled(ativador);
        radio40.setEnabled(ativador);

    }

    private void configComboBoxVarVisuais() {
        texturaComboBox.setEnabled(false);
        corComboBox.setEnabled(false);
        formaComboBox.setEnabled(false);
        letraComboBox.setEnabled(false);
        numeroComboBox.setEnabled(false);
        for (String classe : variaveisVisuaisEscolhidas) {
            switch (classe) {
                case "Color":
                    corComboBox.setEnabled(true);
                    break;
                case "Letter":
                    letraComboBox.setEnabled(true);
                    break;
                case "Number":
                    numeroComboBox.setEnabled(true);
                    break;
                case "Shape":
                    formaComboBox.setEnabled(true);
                    break;
                case "Texture":
                    texturaComboBox.setEnabled(true);
                    break;
            }
        }
    }

    private ArrayList<Object> getAtributosEscolhidosGlyph() {
        ArrayList<Object> atributosEscolhidosGlyph = new ArrayList<>();
        atributosEscolhidosGlyph.add(texturaComboBox.getSelectedItem());
        atributosEscolhidosGlyph.add(corComboBox.getSelectedItem());
        atributosEscolhidosGlyph.add(formaComboBox.getSelectedItem());
        atributosEscolhidosGlyph.add(letraComboBox.getSelectedItem());
        atributosEscolhidosGlyph.add(numeroComboBox.getSelectedItem());
        return atributosEscolhidosGlyph;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (Constantes.PROGRESS == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            progressoBarra.setValue(progress);
        }
    }

    class Task extends SwingWorker<Void, Void> {

        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {
            int progress = 0;
            //Initialize progress property.
            setProgress(0);
            int ordem = 0;
            while (progress < 100) {
                //Sleep for up to one second.
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ignore) {
                    ignore.printStackTrace();
                }
                //Make progress.     
                ordem++;
                progress = executaTarefas(ordem, progress);
                setProgress(Math.min(progress, 100));
            }
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            if (getProgress() == 100) {
                Toolkit.getDefaultToolkit().beep();
                setCursor(null); //turn off the wait cursor
                habilitarRadiosOpcoesGrid(true);
                progressBarDialog.dispose();
            }
        }

    }

    private int executaTarefas(int ordem, int porcentagem) {
        int tarefas = 5;
        switch (ordem) {
            case 1:
                LOGGER.info("Leitura do arquivo.");
                progressoBarra.setToolTipText("Tratando arquivo.");
                manipulador = new ManipuladorArquivo();
                manipulador.lerArquivo(selectedFile);
                porcentagem = (ordem * 100) / tarefas;
                break;
            case 2:
                try {
                    LOGGER.info("Montando Objetos coluna.");
                    manipulador.montarColunas(manipulador.getCabecalho(), manipulador.getTipos());
                    progressoBarra.setToolTipText("Montando colunas.");
                } catch (Exception e) {
                    LOGGER.error("Erro montar objetos COLUNA. \n", e);
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                break;
            case 3:
                try {
                    LOGGER.info("Carregando itens no Grid.");
                    progressoBarra.setToolTipText("Carregando itens no Grid.");
                    manipulador.carregarItensGrid();
                } catch (Throwable e) {
                    LOGGER.error("Erro ao carregar itens no grid. \n", e);
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                break;
            case 4:
                try {
                    LOGGER.info("Definindo a descrição das colunas.");
                    progressoBarra.setToolTipText("Definindo a descrição das colunas.");
                    for (int i = 0; i < manipulador.getColunas().length; i++) {
                        Coluna c = manipulador.getColunas()[i];
                        c.configurarDescricao(manipulador.getDadosColuna(manipulador.getCabecalho()[i]));
                    }
                } catch (Exception e) {
                    LOGGER.error("Erro ao definir a descrição das colunas. \n", e);
                    e.printStackTrace();
                }
                porcentagem = (ordem * 100) / tarefas;
                break;
            case 5:
                LOGGER.info("Preparando variáveis glyphs.");
                progressoBarra.setToolTipText("Preparando valores para as variáveis glyph.");
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_1, true), texturaComboBox);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_2, true), corComboBox);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_3, true), formaComboBox);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_4, true), letraComboBox);
                loadVariaveisGlyph(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_5, true), numeroComboBox);
                porcentagem = (ordem * 100) / tarefas;
                break;
            case 6:
//                LOGGER.info("Preparando lista legenda para o treemap.");
//                loadItensLegendaTreemap();
//                porcentagem = (ordem * 100) / tarefas;
//                progressoBarra.setToolTipText("Preparando lista legenda: " + porcentagem + "%");
                break;
            case 7:
                //                LOGGER.info("Preparando lista tamanho para o treemap.");
//                loadItensTamanhoTreemap();
//                porcentagem = (ordem * 100) / tarefas;
//                progressoBarra.setToolTipText("Preparando lista tamanho: " + porcentagem + "%");
                break;
            case 8:
//                LOGGER.info("Preparando variáveis hierarquia para o treemap.");
//                loadItensHierarquiaTreemap(getColunasCategoricas().toArray());
//                porcentagem = (ordem * 100) / tarefas;
//                progressoBarra.setToolTipText("Carregando variáveis hierarquia Treemap: " + porcentagem + "%");
                break;
            case 9:
//                LOGGER.info("Preparando variáveis Cores para o treemap.");
////                loadItensCoresTreemap(getListaAtributosCategoricos(Constantes.NivelGlyph.NIVEL_2, false));
//                List<String> coresTreemap = new ArrayList<>();
//                coresTreemap.add("---");
//                for (String cabecalho : manipulador.getCabecalho()) {
//                    coresTreemap.add(cabecalho);
//                }
//                loadItensCoresTreemap(coresTreemap.toArray());
//                porcentagem = (ordem * 100) / tarefas;
//                progressoBarra.setToolTipText("Carregando variáveis cores Treemap: " + porcentagem + "%");
                break;
            case 10:
//                LOGGER.info("Preparando variáveis para Detalhes sob Demanda para o treemap.");
//                loadAtributosDetalhes();
//                porcentagem = (ordem * 100) / tarefas;
//                progressoBarra.setToolTipText("Carregando variáveis para Detalhes sob Demanda: " + porcentagem + "%");
                break;
            default:
                throw new AssertionError();
        }
        return porcentagem;
    }
}
